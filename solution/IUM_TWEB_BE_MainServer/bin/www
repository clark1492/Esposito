#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('mainserverexp:server');
const http = require('http');
const config = require('../configs/config');
const {Server} = require("socket.io");
const services = require('../service-layer')('./services');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(config.port);
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
services.log.info("Starting listening to port"+port)
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/* Custom components */
/* Socket.io */
const ioSocketServer = new Server(server, {
  path: "/socket-io/"
});
/* https://socket.io/docs/v4/tutorial/step-5 */

/* TODO: add when a new room is created? Broadcast only to given rooms? */
ioSocketServer.on('connection', (socket) => {
  services.log.info('a user connected');
  socket.on('disconnect', () => {
    services.log.info('user disconnected');
  });
  socket.on('chat-message', (msg) => {
    ioSocketServer.emit('chat-message', msg);
    services.log.info('chat-message'+ msg);
  });

  socket.on('join-room', (msg) => {
    let username = 'Server'
    let room = msg.room
    let message = 'User ' + msg.username + ' just joined the room ' + msg.room
    let joinRoomMsg = {username, room, message}
    ioSocketServer.emit('chat-message', joinRoomMsg);
    services.log.info(message);
  });
});


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
